//Shabrya Lott CPE403 Lab5
//Task 02: Change the ADC sequencer to SS2. Turn on the LED at PF1
//		   if the temperature than 79degF

#include <stdint.h>				//variable definitions for the C99 standard
#include <stdbool.h>			//Boolean definitions for the C99 standard
#include "inc/hw_memmap.h"		//macros defining the memory map of Tiva C Series
#include "inc/hw_types.h"		//defines common types and macros
#include "driverlib/sysctl.h"	//defines macros for System Control API of Driverlib
#include "driverlib/adc.h"		//definitions for using the ADC driver
#include "driverlib/gpio.h"		//defines macros for GPIO API of Driverlib
#include "driverlib/interrupt.h"//defines & macros for NVIC Controller(Interrupt)API of driverlib.
#include "driverlib/timer.h"	//Defines and macros for Timer API of driverLib.
#define TARGET_IS_BLIZZARD_RB1
#include "driverlib/rom.h"		// Macros to facilitate calling functions in the ROM

#ifdef DEBUG
void__error__(char *pcFilename, uint32_t u132Line)
{
}
#endif

int main(void)
{
	//will store 4 values from FIFO when using the sequencer 1
	uint32_t ui32ADC0Value[4];
	//stores average of 4 sampled values
	volatile uint32_t ui32TempAvg;
	//stores temperture in Celsius
	volatile uint32_t ui32TempValueC;
	//stores temperture in Fahrenheit
	volatile uint32_t ui32TempValueF;

	//set cock to 40MHz
	ROM_SysCtlClockSet(SYSCTL_SYSDIV_5|SYSCTL_USE_PLL|SYSCTL_OSC_MAIN|SYSCTL_XTAL_16MHZ);

	//enable port F
	ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);
	//configure in F1 as output
	ROM_GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_1);
	//configure step 0 from temp sensor
	ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_ADC0);
	//each sample in the ADC FIFO will be the result of 64 measurements being averaged together
	ROM_ADCHardwareOversampleConfigure(ADC0_BASE, 64);

	//Enable ADC0, sample sequencer 2, trigger with processor
	ADCSequenceConfigure(ADC0_BASE, 2, ADC_TRIGGER_PROCESSOR, 0);
	//configure ADC0, sequencer 2, step 0
	ROM_ADCSequenceStepConfigure(ADC0_BASE, 2, 0, ADC_CTL_TS);
	//configure ADC0, sequencer 2, step 1
	ROM_ADCSequenceStepConfigure(ADC0_BASE, 2, 1, ADC_CTL_TS);
	//configure ADC0, sequencer 2, step 2
	ROM_ADCSequenceStepConfigure(ADC0_BASE, 2, 2, ADC_CTL_TS);
	//configure ADC0, sequencer 2, step 3 and tell sequencer to finish
	ROM_ADCSequenceStepConfigure(ADC0_BASE,2,3,ADC_CTL_TS|ADC_CTL_IE|ADC_CTL_END);
	//enable ADC0, sequencer 2
	ROM_ADCSequenceEnable(ADC0_BASE, 2);

	while(1)	//infinity loop
	{
		//clear interrupt flag on ADC0, sequencer 2
		ROM_ADCIntClear(ADC0_BASE, 2);
		//Trigger ADC0, sequencer 2
		ROM_ADCProcessorTrigger(ADC0_BASE, 2);

		//wait for ADC conversion to finish
	   while(!ADCIntStatus(ADC0_BASE, 2, false))
	   {
	   }
	   //get data from FIFO and out into array
	   ROM_ADCSequenceDataGet(ADC0_BASE, 2, ui32ADC0Value);
	   //calculate avg temp (+2/4 used for rounding)
	   ui32TempAvg = (ui32ADC0Value[0] + ui32ADC0Value[1] + ui32ADC0Value[2] + ui32ADC0Value[3] + 2)/4;
	   //calculate temp in Celsius
	   ui32TempValueC = (1475 - ((2475 * ui32TempAvg)) / 4096)/10;
	   //calculate temp in Fahrenheit
	   ui32TempValueF = ((ui32TempValueC * 9) + 160) / 5;

	   if(ui32TempValueF > 79) //if temp is > 79 degrees F
		   //turn on PF1 (Red LED)
		   ROM_GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1, 2);
	   else
		   //turn off PF1 (Red LED)
		   ROM_GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1, 0);
	}
}
